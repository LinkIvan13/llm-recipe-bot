from fastapi import FastAPI, Request, Form, Query
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from typing import Optional
from pydantic import BaseModel
from urllib.parse import quote  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ

from openai_client import ask_gpt, ask_gpt_explanation
from logger import log_interaction, get_history

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ urlencode –¥–ª—è Jinja2
templates.env.filters["urlencode"] = lambda u: quote(u)

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /ask
class Question(BaseModel):
    text: str

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
@app.get("/", response_class=HTMLResponse)
def read_form(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
@app.post("/", response_class=HTMLResponse)
def submit_form(request: Request, ingredients: str = Form(...)):
    recipes = ask_gpt(ingredients)
    log_interaction(ingredients, recipes)
    return templates.TemplateResponse("index.html", {
        "request": request,
        "recipes": recipes,
        "ingredients": ingredients
    })

# –ó–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (API-—Ä–µ–∂–∏–º)
@app.post("/ask")
def ask(question: Question):
    recipes = ask_gpt(question.text)
    log_interaction(question.text, recipes)
    return {"recipes": recipes}

# –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
@app.get("/history", response_class=HTMLResponse)
def view_history(request: Request, from_date: Optional[str] = Query(None), keyword: Optional[str] = Query(None)):
    history = get_history(from_date, keyword)
    return templates.TemplateResponse("history.html", {
        "request": request,
        "history": history,
        "from_date": from_date or "",
        "keyword": keyword or ""
    })

# –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ä–µ—Ü–µ–ø—Ç—É
@app.get("/explain", response_class=HTMLResponse)
def explain_recipe(request: Request, title: str = Query(...)):
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è: {title}")
    try:
        explanation = ask_gpt_explanation(title)
    except Exception as e:
        explanation = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è: {str(e)}"
    return templates.TemplateResponse("explain.html", {
        "request": request,
        "title": title,
        "explanation": explanation
    })
