from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

from openai_client import ask_gpt, ask_gpt_explanation

router = Router()


@router.message(F.text)
async def handle_message(message: Message):
    ingredients = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ /start, /help –∏ —Ç.–¥.
    if ingredients.startswith("/"):
        return

    try:
        recipes = ask_gpt(ingredients)
        if not recipes:
            raise ValueError("–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.")

        text = f"üìã <b>–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è:</b> <i>{ingredients}</i>\n\n"
        keyboard = InlineKeyboardBuilder()

        for r in recipes:
            text += f"üç≤ <b>{r['title']}</b>\n{r['description']}\n\n"
            keyboard.row(
                InlineKeyboardButton(
                    text=f"üë®‚Äçüç≥ –û–±—ä—è—Å–Ω–∏: {r['title']}",
                    callback_data=f"explain:{r['title']}"
                )
            )

        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

    except Exception as e:
        await message.answer(
            f"üçΩÔ∏è <b>–û—à–∏–±–∫–∞</b>\n–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.\n\n<code>{str(e)}</code>",
            parse_mode="HTML"
        )


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<i>–∫–∞—Ä—Ç–æ—à–∫–∞, –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, –º–æ—Ä–∫–æ–≤—å</i>",
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("explain:"))
async def explain_dish(callback: CallbackQuery):
    dish = callback.data.split(":", 1)[1]
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞" —É –∫–Ω–æ–ø–∫–∏

    try:
        explanation = ask_gpt_explanation(dish)
        await callback.message.answer(f"üë®‚Äçüç≥ <b>{dish}</b>\n\n{explanation}", parse_mode="HTML")
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è: <code>{str(e)}</code>",
            parse_mode="HTML"
        )

