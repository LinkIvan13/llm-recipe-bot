import hashlib
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

from openai_client import ask_gpt, ask_gpt_explanation

router = Router()

# –•—Ä–∞–Ω–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID ‚Üí –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
dish_registry = {}


def generate_dish_id(dish_title: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –±–ª—é–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    return hashlib.sha1(dish_title.encode()).hexdigest()[:10]


@router.message(F.text)
async def handle_message(message: Message):
    ingredients = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if ingredients.startswith("/"):
        return

    try:
        recipes = ask_gpt(ingredients)

        if not recipes:
            await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
            return

        kb = []
        for r in recipes:
            title = r.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = r.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")

            dish_id = generate_dish_id(title)
            # –µ—Å–ª–∏ –∫–æ–ª–ª–∏–∑–∏—è ‚Äî —Ä–∞—Å—à–∏—Ä—è–µ–º ID
            while dish_id in dish_registry and dish_registry[dish_id] != title:
                dish_id = generate_dish_id(title + str(len(dish_registry)))

            dish_registry[dish_id] = title

            kb.append([
                InlineKeyboardButton(
                    text=f"üßæ –û–±—ä—è—Å–Ω–∏: {title[:30]}",
                    callback_data=f"explain:{dish_id}"
                )
            ])

        response = "\n\n".join(
            f"üç≤ <b>{r.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n{r.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
            for r in recipes
        )

        await message.answer(
            f"üìã <b>–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è:</b> <i>{ingredients}</i>\n\n{response}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(
            f"üçΩÔ∏è <b>–û—à–∏–±–∫–∞ GPT</b>\n<code>{str(e)}</code>",
            parse_mode="HTML"
        )


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<i>–∫–∞—Ä—Ç–æ—à–∫–∞, –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, –º–æ—Ä–∫–æ–≤—å</i>",
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("explain:"))
async def explain_dish(callback: CallbackQuery):
    await callback.answer()  # —Å–∫—Ä—ã—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞"

    try:
        dish_id = callback.data.split("explain:")[1]
        dish_title = dish_registry.get(dish_id)

        if not dish_title:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª—é–¥–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.")
            return

        explanation = ask_gpt_explanation(dish_title)

        await callback.message.answer(
            f"üë®‚Äçüç≥ <b>{dish_title}</b>\n\n{explanation}",
            parse_mode="HTML"
        )

    except TelegramBadRequest as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ Telegram: <code>{str(e)}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è: <code>{str(e)}</code>",
            parse_mode="HTML"
        )

