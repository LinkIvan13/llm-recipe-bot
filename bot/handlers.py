import hashlib
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest

from openai_client import ask_gpt, ask_gpt_explanation

router = Router()

# –•—Ä–∞–Ω–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID ‚Üí –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
dish_registry: dict[str, str] = {}

def generate_dish_id(dish_title: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –±–ª—é–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–ª–ª–∏–∑–∏—è, —Ä–∞—Å—à–∏—Ä—è–µ—Ç ID —Å –ø–æ–º–æ—â—å—é —Å—á–µ—Ç—á–∏–∫–∞.
    """
    base_id = hashlib.sha1(dish_title.encode()).hexdigest()[:10]
    counter = 0
    new_id = base_id
    # –ï—Å–ª–∏ —Ç–∞–∫–æ–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –±–ª—é–¥–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    while new_id in dish_registry and dish_registry[new_id] != dish_title:
        counter += 1
        new_id = hashlib.sha1((dish_title + str(counter)).encode()).hexdigest()[:10]
    return new_id

@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤</b>!\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<i>–∫–∞—Ä—Ç–æ—à–∫–∞, –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, –º–æ—Ä–∫–æ–≤—å</i>\n\n"
        "üìå –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üßæ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞.",
        parse_mode="HTML"
    )

@router.message(F.text)
async def handle_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ —Å–ø–∏—Å–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
    """
    ingredients = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start, /help –∏ —Ç.–ø.)
    if ingredients.startswith("/"):
        return

    try:
        recipes = ask_gpt(ingredients)

        if not recipes:
            await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
            return

        kb = []
        for r in recipes:
            title = r.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            dish_id = generate_dish_id(title)
            dish_registry[dish_id] = title

            kb.append([
                InlineKeyboardButton(
                    text=f"üßæ –û–±—ä—è—Å–Ω–∏: {title[:30]}",
                    callback_data=f"explain:{dish_id}"
                )
            ])

        response = "\n\n".join(
            f"üç≤ <b>{r.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n{r.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
            for r in recipes
        )

        await message.answer(
            f"üìã <b>–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è:</b> <i>{ingredients}</i>\n\n{response}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: %s", ingredients)
        await message.answer(
            f"üçΩÔ∏è <b>–û—à–∏–±–∫–∞ GPT</b>\n<code>{str(e)}</code>",
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("explain:"))
async def explain_dish(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞.
    –ò–∑ callback_data –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è ID –±–ª—é–¥–∞, –∑–∞—Ç–µ–º –ø–æ –Ω–µ–º—É –∏—â–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ—è—Å–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ask_gpt_explanation.
    """
    await callback.answer()  # —Å–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–∑–∞–≥—Ä—É–∑–∫–∞"

    try:
        dish_id = callback.data.split("explain:")[1]
        dish_title = dish_registry.get(dish_id)

        if not dish_title:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª—é–¥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
            return

        explanation = ask_gpt_explanation(dish_title)
        await callback.message.answer(
            f"üë®‚Äçüç≥ <b>{dish_title}</b>\n\n{explanation}",
            parse_mode="HTML"
        )

    except TelegramBadRequest as e:
        logging.warning("TelegramBadRequest –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è: %s", e)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ Telegram: <code>{str(e)}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –±–ª—é–¥–∞ —Å ID %s", dish_id)
        await callback.message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è: <code>{str(e)}</code>",
            parse_mode="HTML"
        )
